In this assignment, you will create a simulation of a Elementary Cellular Automaton, such as the famous Rule 30 automaton. The automaton operates on a fixed row of 21 cells, each of which can be in one of two states: 0 (dead) or 1 (alive). Over multiple generations, the cells update based on specific rules.

The state of each cell in the next generation is determined by its current state and the states of its immediate neighbors (left and right) according to a specific rule. The automaton applies a specific rule to these three cells to determine the next state of the current cell. The same rule is applied for each cell in the array for every new generation.

It starts with a row of 21 cells with only one alive cell at a given index. Every new generation is computed based on three adjacent cells: the current cell and its two neighbors. The new state of the current cell is determined by the rule, which is an 8-bit binary number (0 to 255). The rule specifies the new state of the center cell based on the states of the left, center, and right cells.

Some research explores using ECA to generate pseudorandom numbers for cryptographic applications, leveraging their deterministic but seemingly random behavior. The most famous ECA is Rule 30, which is known for its chaotic behavior and is often used as a random number generator.
Rules Overview

In this assignment, you will implement and experiment with Elementary Cellular Automaton Rules, which govern the behavior of the automaton. These rules define how the state of each cell evolves based on its current state and the states of its immediate neighbors.
What Are Cellular Automaton Rules?

The rules are encoded as an 8-bit binary number. Each bit represents the new state of a cell given a particular configuration of the cell and its neighbors. In the following table, we show the binary representation specifying combinations of left (L), center (C), and right (R) cell state, and the corresponding new state for the center cell:
Left (L)	Center (C)	Right (R)	Rule Index	New State
1	1	1	7	b7
1	1	0	6	b6
1	0	1	5	b5
1	0	0	4	b4
0	1	1	3	b3
0	1	0	2	b2
0	0	1	1	b1
0	0	0	0	b0

The new state column showing b7​, b6​, b5​, ..., b0​ is an 8-bit binary number corresponds to a decimal value (0 to 255), which defines the specific rule.
Rule Example: Rule 30

    Decimal representation of the rule: 30
    Binary representation of 30: 00011110
    b7b (highest significant bit) = 0, b6​ = 0, b5​ = 0, b4​ = 1, b3​ = 1, b2​ = 1, b1​ = 1, b0​ (lowest significant bit) = 0
    New state mapping (LCR -> bibi​) assigns the highest significant bit (b7b7​) to the LCR triplet (111) equivalent to 7 in decimal and the lowest significant bit (b0b0​) to the rightmost triplet (000) equivalent to 0 in decimal. For example, for Rule 30:
        111 -> b7 = 0 , which means that if the left, center, and right cells are all alive, the center cell becomes dead (0) in the next generation.
        110 -> b6 = 0 , which means that if the left and center cells are alive, but the right cell is dead, the center cell becomes dead (0) in the next generation.
        101 -> b5 = 0 which means that if the left and right cell are alive, but the center cell is dead, the center cell becomes dead (0) in the next generation.
        100 -> b4 = 1 , which means that if the left cell is alive and the center and right cells are dead, the center cell becomes alive (1) in the next generation.
        011 -> b3 = 1 , which means that if the center and right cells are alive, but the left cell is dead, the center cell becomes alive (1) in the next generation.
        010 -> b2 = 1 , which means that if the center cell is alive, but the left and right cells are dead, the center cell becomes alive (1) in the next generation.
        001 -> b1 = 1 , which means that if the right cell is alive, but the left and center cells are dead, the center cell becomes alive (1) in the next generation.
        000 -> b0 = 0 , which means that if all cells are dead, the center cell becomes dead (0) in the next generation.

This is how Rule 30 works. The same logic applies to other rules, but the binary representation of the rule (b7b6b5b4b3b2b1b0​) determines the new state of the center cell based on the states of its neighbors.

How the Rules Work

For each cell in the array:

    Identify its left, center, and right values. For cells on the boundaries, use the specified boundary condition discussed in next subsection (e.g., cyclic or fixed).
    Match the triplet (LCR) with one of the 8 possible patterns.
    Use the corresponding bit in the rule's binary representation to determine the cell's next state.

Boundary Conditions

Boundary conditions define how the automaton handles cells at the edges of the array. Two common approaches are:

    Fixed Boundary:
        Treat cells beyond the edges as permanently 0.
        Example: For a 21-cell array, neighbors of the first cell are (0, current[0], current[1]).

    Cyclic Boundary:
        Treat the array as circular, so the first cell's left neighbor is the last cell, and the last cell's right neighbor is the first cell.
        Example: For a 21-cell array, neighbors of the first cell are (current[20], current[0], current[1]).

In this assignment, you will be using the cyclic boundary condition.
Additional Resources

    Wikipedia: Cellular Automaton
    Conway's Game of Life (1D Explanation)
    Online Rule Visualization

Input Format

Your program will prompt the user Enter input: take three integers as input, separated by spaces. These integers define the initial setup and parameters for the simulation. The expected inputs are:

    Index of the Alive Cell: Specifies the index (0-based) of the cell that starts in the "alive" state (1).
        Example: 10 means that the cell at index 10 starts as alive (1) in the 21 element array, while other elements are dead (0).
    Rule Number: Specifies the rule to use for the simulation (a value between 0 and 255).
        Example: 30 to simulate Rule 30, which we will need to convert to binary.
    Number of Iterations: Specifies how many generations of the automaton should be computed and displayed.
        Example: 15 for printing 15 generations on 15 lines.

Note
The size of the array is fixed at 21 cells.